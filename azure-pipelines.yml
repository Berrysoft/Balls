trigger:
- master

jobs:
- job: Build_Windows
  strategy:
    matrix:
      x64:
        target: 'x86_64-pc-windows-msvc'
        publishName: 'balls.win.x86_64'
      x86:
        target: 'i686-pc-windows-msvc'
        publishName: 'balls.win.i686'
      arm64:
        target: 'aarch64-pc-windows-msvc'
        publishName: 'balls.win.aarch64'
  pool:
    vmImage: windows-latest
  
  steps:
  - pwsh: |
      Invoke-WebRequest -Uri "https://globalcdn.nuget.org/packages/vc-ltl.5.2.1.nupkg?packageVersion=5.2.1" -OutFile "vc-ltl.nupkg"
      Expand-Archive vc-ltl.nupkg -DestinationPath vc-ltl
    displayName: "Download VC-LTL"

  - pwsh: |
      rustup toolchain install nightly --no-self-update
      rustup +nightly target add $(target)

      $env:VC_LTL_LIB="vc-ltl/build/native/TargetPlatform/10.0.19041.0/lib"

      cargo +nightly build --release --target $(target) --features vc-ltl
    displayName: "Build"

  - pwsh: |
      cd target/$(target)/release
      cp balls.exe $(Build.BinariesDirectory)/
      cp balls.pdb $(Build.BinariesDirectory)/
    displayName: 'Copy Binaries'

  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: '$(Build.BinariesDirectory)'
      includeRootFolder: false
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)/$(publishName).zip'
    displayName: 'Archive'

  - task: PublishBuildArtifacts@1
    inputs:
      ArtifactName: 'publish'

- job: Build_Ubuntu_GTK
  strategy:
    matrix:
      noble-x64:
        image: 'ubuntu-24.04'
        ubuntuDist: 'noble'
        target: 'x86_64-unknown-linux-gnu'
        arch: 'x86_64'
  pool:
    vmImage: $(image)
  
  steps:
  - script: |
      sudo apt-get update
      sudo apt-get install libgtk-4-dev
    displayName: 'Install gtk'

  - script: |
      rustup toolchain install nightly
      rustup +nightly target add $(target)
      cargo +nightly install cargo-deb
    displayName: "Install cargo-deb"

  - script: |
      cargo +nightly build --target $(target) --release --no-default-features --features gtk
      cargo +nightly deb --target $(target) --no-build -o $(Build.ArtifactStagingDirectory)/balls.gtk.$(ubuntuDist).$(arch).deb
    displayName: "Build"

  - task: PublishBuildArtifacts@1
    inputs:
      ArtifactName: 'publish'

- job: Build_Ubuntu_QT
  strategy:
    matrix:
      jammy-x64:
        image: 'ubuntu-22.04'
        ubuntuDist: 'jammy'
        target: 'x86_64-unknown-linux-gnu'
        arch: 'x86_64'
        qtver: '6'
      noble-x64:
        image: 'ubuntu-24.04'
        ubuntuDist: 'noble'
        target: 'x86_64-unknown-linux-gnu'
        arch: 'x86_64'
        qtver: '6'
  pool:
    vmImage: $(image)
  
  steps:
  - script: |
      sudo apt-get update
      sudo apt-get install qtbase5-dev
    displayName: 'Install qt5'
    condition: eq(variables['qtver'], '5')

  - script: |
      sudo apt-get update
      sudo apt-get install qt6-base-dev
    displayName: 'Install qt6'
    condition: eq(variables['qtver'], '6')

  - script: |
      rustup toolchain install nightly
      rustup +nightly target add $(target)
      cargo +nightly install cargo-deb
    displayName: "Install cargo-deb"

  - script: |
      ln -s ~/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/bin/rust-lld ~/.cargo/bin/ld.lld
      export RUSTFLAGS="-Clinker-plugin-lto -Clinker=clang -Clink-arg=-flto -Clink-arg=-fuse-ld=$HOME/.cargo/bin/ld.lld"
      cargo +nightly deb --target $(target) --profile release -o $(Build.ArtifactStagingDirectory)/balls.qt.$(ubuntuDist).$(arch).deb
    displayName: "Build"

  - task: PublishBuildArtifacts@1
    inputs:
      ArtifactName: 'publish'

- job: Build_Mac
  pool:
    vmImage: 'macOS-13'
  
  steps:
  - script: |
      rustup toolchain install nightly
      rustup +nightly target add x86_64-apple-darwin
      rustup +nightly target add aarch64-apple-darwin
    displayName: "Install toolchain"

  - script: |
      cargo +nightly build --release --target x86_64-apple-darwin
    displayName: "Build x64"

  - script: |
      cargo +nightly build --release --target aarch64-apple-darwin
    displayName: "Build arm64"

  - script: |
      macbundle/bundle.sh
      cp target/macbundle/balls.app.zip $(Build.ArtifactStagingDirectory)/balls.mac.app.zip
    displayName: "Create bundle"

  - task: PublishBuildArtifacts@1
    inputs:
      ArtifactName: 'publish'
