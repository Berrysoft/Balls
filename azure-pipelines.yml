trigger:
- master

jobs:
- job: 'Build'
  strategy:
    matrix:
      windows:
        imageName: 'windows-latest'
        plat: 'win'
        rid: 'win'
        def: '-DBUILD_WINDOWS=on'
        arch: x64
      windows_x86:
        imageName: 'windows-latest'
        plat: 'win'
        rid: 'win'
        def: '-DBUILD_WINDOWS=on'
        arch: x86
      linux:
        imageName: 'ubuntu-latest'
        plat: 'linux'
        rid: 'linux'
        def: '-DBUILD_GTK3=on'
      mac:
        imageName: 'macos-latest'
        plat: 'mac'
        rid: 'mac'
        def: '-DBUILD_COCOA=on'
  pool:
    vmImage: $(imageName)

  variables:
    configCmdline: -DBUILD_SHARED_LIBS=on -DXAML_INSTALL=off -DBUILD_WEBVIEW=off -DBUILD_RESOURCE_COMPILER=off -DBUILD_DETECTOR=off -DBUILD_CONTROLS=off -DBUILD_CMDLINE=off -DBUILD_PARSER=off
    macLLVMPath: /usr/local/opt/llvm/bin

  steps:
  - script: |
      git submodule init
      git submodule update --init --recursive
    displayName: 'Init git submodule'

  - script: |
      vcpkg install wil:$(arch)-windows
    displayName: 'Install wil'
    condition: eq(variables.rid, 'win')

  - script: |
      sudo add-apt-repository ppa:ubuntu-toolchain-r/ppa
      sudo add-apt-repository ppa:mhier/libboost-latest
      sudo apt-get install gcc-10 g++-10 libgtk-3-dev libwebkit2gtk-4.0-dev ninja-build libboost1.70-dev
      sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-10 100 --slave /usr/bin/g++ g++ /usr/bin/g++-10 --slave /usr/bin/gcov gcov /usr/bin/gcov-10
    displayName: 'Install linux dependencies'
    condition: eq(variables.rid, 'linux')

  - script: |
      brew install ninja boost llvm
    displayName: 'Install ninja & boost & llvm'
    condition: eq(variables.plat, 'mac')

  - script: |
      call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" $(arch)
      mkdir build & cd build
      cmake .. -GNinja $(def) -DCMAKE_C_COMPILER=cl -DCMAKE_CXX_COMPILER=cl -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$(Build.ArtifactStagingDirectory)/$(rid)-$(arch) -DVCPKG_TARGET_TRIPLET=$(arch)-windows -DCMAKE_TOOLCHAIN_FILE=$(VCPKG_INSTALLATION_ROOT)/scripts/buildsystems/vcpkg.cmake $(configCmdline)
    displayName: 'Configure all projects'
    condition: eq(variables.rid, 'win')
    env:
      BOOST_ROOT: $(BOOST_ROOT_1_72_0)

  - task: CMake@1
    displayName: 'Configure all projects'
    condition: eq(variables.plat, 'linux')
    inputs:
      cmakeArgs: .. $(def) -GNinja -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$(Build.ArtifactStagingDirectory)/$(rid) $(configCmdline)

  - task: CMake@1
    displayName: 'Configure all projects'
    condition: eq(variables.plat, 'mac')
    inputs:
      cmakeArgs: .. $(def) -GNinja -DCMAKE_C_COMPILER=$(macLLVMPath)/clang -DCMAKE_CXX_COMPILER=$(macLLVMPath)/clang++ -DCMAKE_OBJC_COMPILER=$(macLLVMPath)/clang -DCMAKE_OBJCXX_COMPILER=$(macLLVMPath)/clang++ -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$(Build.ArtifactStagingDirectory)/$(rid) $(configCmdline)

  - script: |
      call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" $(arch)
      cd build
      ninja install
    displayName: 'Install all projects'
    condition: eq(variables.rid, 'win')

  - script: |
      cd build
      mkdir -p $(Build.ArtifactStagingDirectory)/$(rid)
      ninja install
    displayName: 'Install all projects'
    condition: ne(variables.plat, 'win')

  - task: PublishBuildArtifacts@1
    displayName: 'Publish'
    inputs:
      artifactName: 'publish'
